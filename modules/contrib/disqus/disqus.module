<?php

/**
 * @file
 * The Disqus Drupal module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * API No action on entity delete.
 */
define('DISQUS_API_NO_ACTION', 0);

/**
 * API Close on entity delete.
 */
define('DISQUS_API_CLOSE', 1);

/**
 * API Remove on entity delete.
 */
define('DISQUS_API_REMOVE', 2);

/**
 * Implements hook_help().
 */
function disqus_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.disqus':
      $output = '<p>' . t('Uses the !disqus comment system to enhance comments.', array(
          '!disqus' => \Drupal::l('Disqus', URL::fromUri('http://disqus.com/')))) . '</p>';
      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<ol><li>' . t('Register your site information at !disqus.', array('!disqus' => \Drupal::l('Disqus', URL::fromUri('http://disqus.com/')))) . '</li>';
      $output .= '<li>' . t('In the !configuration, set the domain to what you registered with Disqus.',
          array('!configuration' => \Drupal::l('Disqus configuration', Url::fromRoute('disqus.settings')))) . '</li>';
      $output .= '<li>' . t('Disqus comments can be enabled for any !entity-help (for example, a !content-type). On the Manage fields page for each entity sub-type, you can enable disqus by adding a Disqus comments field.', array(
          '!entity-help' => \Drupal::l('entity sub-type', Url::fromRoute('help.page', array('name' => 'entity'))),
          '!content-type' => \Drupal::l('content type', Url::fromRoute('entity.node_type.collection')),
        )) . '</li>';
      $output .= '<li>' . t('Alternatively disqus comments can be used on !blocks. You will first need to configure the disqus comment field for any entity sub-type.',
          array('!blocks' => \Drupal::l('Blocks', Url::fromRoute('block.admin_display')))) . '</li>';
      $output .= '<li>' . t('Visit the !permissions, and set which users you would like to have the ability to view Disqus threads (recommended for role).',
          array('!permissions' => \Drupal::l('permissions', Url::fromRoute('user.admin_permissions', array(), array('fragment' => 'module-disqus'))))) . '</li></ol>';
      return $output;

    case 'disqus.settings':
      return '<p>' . t('The following provides the general configuration options for the !disqus comment web service.',
          array('!disqus' => \Drupal::l('Disqus', URL::fromUri('http://disqus.com')))) . '</p>';
  }
}

/**
 * Implements hook_node_links_alter().
 */
function disqus_node_links_alter(array &$node_links, \Drupal\node\NodeInterface $node, array &$context) {
  $fields = \Drupal::service('disqus.manager')->getFields('node');
  foreach ($fields as $field_name => $detail) {
    //Skip fields that the node does not have.
    if (!$node->hasField($field_name)) {
      continue;
    }
    $links = array();
    if ($node->get($field_name)->status) {
      if (\Drupal::currentUser()->hasPermission('view disqus comments')) {
        if ($context['view_mode'] === 'teaser') {
          // Display the Disqus link.
          $links['disqus_comments_num'] = array(
            'title' => t('Comments'),
            'url' => $node->urlInfo(),
            'fragment' => 'disqus_thread',
            'attributes' => array(
              // Identify the node for Disqus with the unique identifier:
              // http://docs.disqus.com/developers/universal/#comment-count
              'data-disqus-identifier' => 'node/' . $node->id(),
            ),
          );
        }
        $node_links['disqus'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array(
            'class' => array('links', 'inline'),
          ),
        );

        // Attach disqus library to load the Disqus comment count JavaScript.
        $node_links['#attached']['library'][] = 'disqus/disqus';
        $node_links['disqus']['#attached']['drupalSettings']['disqusComments'] = \Drupal::config('disqus.settings')
          ->get('disqus_domain');
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function disqus_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {
    return;
  }

  $field = \Drupal::service('disqus.manager')
    ->getFields($entity->getEntityTypeId());
  if (!$entity->hasField(key($field))) {
    return;
  }

  $config = \Drupal::config('disqus.settings');
  // Close/remove the thread on disqus if required.
  $action = $config->get('advanced.api.disqus_api_delete');
  if ($action != DISQUS_API_NO_ACTION) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array(
          'forum' => $config->get('disqus_domain'),
          'thread:ident' => "{$entity->getEntityTypeId()}/{$entity->id()}",
          'thread' => '1'
        ));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        \Drupal::logger('disqus')
          ->error('Error loading thread details for entity : !identifier. Check your API keys.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
      }
      if (isset($thread->id)) {
        if ($action == DISQUS_API_CLOSE) {
          try {
            $disqus->threads->close(array(
              'access_token' => $config->get('advanced.disqus_useraccesstoken'),
              'thread' => $thread->id,
              'forum' => $config->get('disqus_domain')
            ));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error closing the thread on Disqus.'), 'error');
            \Drupal::logger('disqus')
              ->error('Error closing thread for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
          }
        }
        if ($action == DISQUS_API_REMOVE) {
          try {
            $disqus->threads->remove(array(
              'access_token' => $config->get('advanced.disqus_useraccesstoken'),
              'thread' => $thread->id,
              'forum' => $config->get('disqus_domain')
            ));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error removing the thread on Disqus.'), 'error');
            \Drupal::logger('disqus')
              ->error('Error closing thread for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function disqus_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {
    return;
  }

  $field = \Drupal::service('disqus.manager')
    ->getFields($entity->getEntityTypeId());
  if (!$entity->hasField(key($field))) {
    return;
  }

  $config = \Drupal::config('disqus.settings');
  // Update the thread information on disqus if required.
  if ($config->get('advanced.api.disqus_api_update') && ($entity->label() != $entity->original->label() || $entity->url() != $entity->original->url())) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array(
          'forum' => $config->get('disqus_domain'),
          'thread:ident' => "{$entity->getEntityTypeId()}/{$entity->id()}",
          'thread' => '1'
        ));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        \Drupal::logger('disqus')
          ->error('Error loading thread details for entity : !identifier. Check your API keys.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
      }
      if (isset($thread->id)) {
        try {
          $disqus->threads->update(array(
            'access_token' => $config->get('advanced.disqus_useraccesstoken'),
            'thread' => $thread->id,
            'forum' => $config->get('disqus_domain'),
            'title' => $entity->label(),
            'url' => $entity->url('canonical', array('absolute' => TRUE))
          ));
        }
        catch (Exception $exception) {
          drupal_set_message(t('There was an error updating the thread details on Disqus.'), 'error');
          \Drupal::logger('disqus')
            ->error('Error updating thread details for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
        }
      }
    }
  }
}

/**
 * Implements hook_field_views_data().
 */
function disqus_field_views_data(\Drupal\field\FieldStorageConfigInterface $field_storage) {
  $data = views_field_default_views_data($field_storage);
  foreach ($data as $table_name => $table_data) {
    $data[$table_name]['entity_id']['field'] = array(
      'title' => t('Disqus Comment Count'),
      'group' => t('Content'),
      'help' => t('The number of Disqus comments made on the post. Note that this will not work in the preview.'),
      'id' => 'disqus_comment_count',
    );
  }
  return $data;
}

/**
 * Implements hook_theme().
 */
function disqus_theme() {
  return array(
    'disqus_noscript' => array(
      'variables' => array('disqus' => NULL),
    ),
  );
}

/**
 * Prepares the noscript variables for the template used when
 * JavaScript is not available.
 */
function theme_disqus_noscript() {
  $url = Url::fromUri('http://' . \Drupal::config('disqus.settings')
    ->get('disqus_domain') . '.disqus.com/');
  $variables['disqus_message'] = \Drupal::l(t('View the discussion thread.'), $url);
}

/**
 * Creates an instance of the Disqus PHP API.
 *
 * @return
 *   The instance of the Disqus API.
 */
function disqus_api() {
  try {
    $disqus = new DisqusAPI(\Drupal::config('disqus.settings')
      ->get('advanced.disqus_secretkey'));
  }
  catch (Exception $exception) {
    drupal_set_message(t('There was an error loading the Disqus PHP API. Please check your API keys and try again.'), 'error');
    \Drupal::logger('disqus')
      ->error('Error loading the Disqus PHP API. Check your API keys.', array());
    return FALSE;
  }
  return $disqus;
}

/**
 * Implementation of hook_views_api().
 */
function disqus_views_api() {
  return array('api' => 3);
}
